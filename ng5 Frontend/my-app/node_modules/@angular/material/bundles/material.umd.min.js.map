{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n  get scrollDistance(): number { return this._scrollDistance; }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.0.4');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /** Ripple config for all ripples created by events. */\n  rippleConfig: RippleConfig = {};\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registeredevent listeners from the trigger element.\n    this._removeTriggerEvents();  this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) =>\n            element.addEventListener(type, fn, this._eventOptions));\n      });\n\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fadeInContent, transformPanel} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPanel,\n    fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      this.focus();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const previouslyFocusedIndex = this._keyManager.activeItemIndex;\n\n      this._keyManager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && this._keyManager.activeItem &&\n          this._keyManager.activeItemIndex !== previouslyFocusedIndex) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple) {\n        this.close();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to delay before changing the tooltip visibility to hidden */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element, false).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('initial, void, hidden', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  keyframes,\n} from '@angular/animations';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n\nconst SORT_ANIMATION_TRANSITION =\n    AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    trigger('indicator', [\n      state('asc', style({transform: 'translateY(0px)'})),\n      // 10px is the height of the sort indicator, minus the width of the pointers\n      state('desc', style({transform: 'translateY(10px)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('leftPointer', [\n      state('asc', style({transform: 'rotate(-45deg)'})),\n      state('desc', style({transform: 'rotate(45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('rightPointer', [\n      state('asc', style({transform: 'rotate(45deg)'})),\n      state('desc', style({transform: 'rotate(-45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('indicatorToggle', [\n      transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n        style({transform: 'translateY(25%)', opacity: 0}),\n        style({transform: 'none', opacity: 1})\n      ]))),\n      transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n        style({transform: 'none', opacity: 1}),\n        style({transform: 'translateY(-25%)', opacity: 0})\n      ]))),\n      transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n        style({transform: 'translateY(-25%)', opacity: 0}),\n        style({transform: 'none', opacity: 1})\n      ]))),\n      transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n        style({transform: 'none', opacity: 1}),\n        style({transform: 'translateY(25%)', opacity: 0})\n      ]))),\n    ])\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input('start') start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index() { return this._index; }\n  set index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active() { return this._active; }\n  set active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional() { return this._optional; }\n  set optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n      state('current', style({transform: 'none', visibility: 'visible'})),\n      state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n      transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ])\n  ],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({height: '0px', visibility: 'hidden'})),\n      state('next', style({height: '0px', visibility: 'hidden'})),\n      state('current', style({height: '*', visibility: 'visible'})),\n      transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext { }\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatHeaderCell, MatCellDef, MatHeaderCellDef, MatColumnDef} from './cell';\nimport {MatHeaderRow, MatRow, MatHeaderRowDef, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  set data(data: T[]) { this._data.next(data); }\n  get data() { return this._data.value; }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  set filter(filter: string) { this._filter.next(filter); }\n  get filter(): string { return this._filter.value; }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  get sort(): MatSort|null { return this._sort; }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  get paginator(): MatPaginator|null { return this._paginator; }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal<any> | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal<any> | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n      state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal<any>;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  _position: MatTabBodyPositionState;\n  @Input('position') set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  _origin: MatTabBodyOriginState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input('origin') set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert() { return this._invert; }\n  set invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max() { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min() { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step() { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical() { return this._vertical; }\n  set vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: any = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {trigger, style, transition, animate} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('contentFade', [\n      transition(':enter', [\n        style({opacity: '0'}),\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n      ])\n    ])\n  ],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\nexport const SHOW_ANIMATION =\n    `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\nexport const HIDE_ANIMATION =\n    `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n      transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n        animate(HIDE_ANIMATION)),\n      transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n    ])\n  ],\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  get direction(): SortDirection { return this._direction; }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear() { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A radio-button. May be inside of\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value) { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value) {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  source: MatSlideToggle;\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    let event = new MatSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.onChange(this.checked);\n    this.change.emit(event);\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = pageIndex;\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = length;\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = pageSizeOptions;\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage() {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value() { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. **/\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\n\n/**\n * This animation transforms the select's overlay panel on and off the page.\n *\n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n *\n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER, MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER, ARIA_DESCRIBER_PROVIDER],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList.onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': 'onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatDividerCssMatStyler,\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListDivider,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListDivider,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatDividerCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListDivider,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatDividerCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('void', style({\n    opacity: 0,\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\n    transform: 'scale(0.01, 0.01)'\n  })),\n  state('enter-start', style({\n    opacity: 1,\n    transform: 'scale(1, 0.5)'\n  })),\n  state('enter', style({\n    transform: 'scale(1, 1)'\n  })),\n  transition('void => enter-start', animate('100ms linear')),\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n]);\n\n\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(private _elementRef: ElementRef) {\n    super();\n  }\n\n  /** Focuses the menu item. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  ngOnDestroy() {\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInItems, transformMenu} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition() { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition() { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  set classList(classes: string) { this.panelClass = classes; }\n  get classList(): string { return this.panelClass; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu. This method is used by the menu trigger\n   * to focus the first item when the menu is opened by the ENTER key.\n   */\n  focusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened by mouse,\n   * allowing the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // If the menu was opened by mouse, we focus the root node, which allows for the keyboard\n    // interactions to work. Otherwise, if the menu was opened by keyboard, we focus the first item.\n    if (this._openedByMouse) {\n      let rootNode = this._overlayRef!.overlayElement.firstElementChild as HTMLElement;\n\n      if (rootNode) {\n        this.menu.resetActiveItem();\n        rootNode.focus();\n      }\n    } else {\n      this.menu.focusFirstItem();\n    }\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse || !this.triggersSubmenu()) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n\n/** Divider between items within a list. */\n@Directive({\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n})\nexport class MatListDivider {}\n\n/** A Material Design list component. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-divider',\n  host: {'class': 'mat-divider'}\n})\nexport class MatDividerCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input() get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private  _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({\n        height: '{{collapsedHeight}}',\n      }), {\n        params: {collapsedHeight: '48px'},\n      }),\n      state('expanded', style({\n        height: '{{expandedHeight}}'\n      }), {\n        params: {expandedHeight: '64px'}\n      }),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, false);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keyup event calling to toggle() if appropriate. */\n  _keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatAccordion} from './accordion';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /** Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols() { return this._cols; }\n  set cols(value: any) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize() { return this._gutter; }\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Date filter for the month and year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _monthView: boolean;\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n\n  get _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * Determine the date for the month that comes before the given month in the same column in the\n   * calendar table.\n   */\n  private _prevMonthInSameCol(date: D): D {\n    // Decrement by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, -4);\n  }\n\n  /**\n   * Determine the date for the month that comes after the given month in the same column in the\n   * calendar table.\n   */\n  private _nextMonthInSameCol(date: D): D {\n    // Increment by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, 4);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n\n  /**\n   * Handles keydown event on datepicker content.\n   * @param event The event.\n   */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this._opened = false;\n    this.closedStream.emit();\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() location: Location,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    // Close when escape keydown event occurs\n    overlayRef.keydownEvents().pipe(\n      filter(event => event.keyCode === ESCAPE && !dialogRef.disableClose)\n    ).subscribe(() => dialogRef.close());\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MatDialogConfig): MatDialogConfig {\n  return {...new MatDialogConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) private _document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      // Note: 1 corresponds to `Node.ELEMENT_NODE` which we can't use in Universal.\n      if (element.childNodes[i].nodeType === 1) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  get minRows() { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows() { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Change to month view';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToYearViewLabel = 'Change to year view';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input() get checked() {\n    return this._checked;\n  }\n\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input() get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input() get selectable(): boolean {\n    return this._selectable;\n  }\n\n\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input() get removable(): boolean {\n    return this._removable;\n  }\n\n\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  get id() { return this._id || this._uid; }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  get required() {\n    return this._required;\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur() { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus() { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog.  */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker() { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder() { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel() { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {MatOption, MatOptgroup} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n})\nexport class MatAutocomplete implements AfterContentInit {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","inputs","host","class","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","MatTabGroup","propDecorators","dynamicHeight","type","Input","_dynamicHeightDeprecated","args","selectedIndex","headerPosition","backgroundColor","selectedIndexChange","Output","focusChange","selectedTabChange","selectChange","_MatTabGroupMixinBase","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","_this","_super","call","this","tslib_1.__extends","prototype","focus","nativeElement","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","Directive","selector","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_elementRef","_changeDetectorRef","_viewportRuler","_dir","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","Subscription","EMPTY","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","Object","defineProperty","value","coerceNumberProperty","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","emit","focusIndex","preventDefault","ngAfterContentInit","dirChange","change","observableOf","resize","realign","requestAnimationFrame","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","index","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","dir","_getLayoutDirection","scrollLeft","scrollWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","Component","template","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_backgroundColor","classList","remove","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","MatTab","declarations","MatInkBar","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","MatToolbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","state","trigger","transition","animate","SORT_ANIMATION_TRANSITION","keyframes","opacity","MatSort","CdkColumnDef","MatSortHeader","start","disableClear","_MatSortHeaderMixinBase","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","TemplateRef","CdkStepLabel","optionalLabel","Injectable","MatStepperIntl","MatStepHeader","_intl","_focusMonitor","_element","changeDetectorRef","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","role","selected","active","optional","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","provide","ErrorStateMatcher","useExisting","MatStepper","apply","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","visibility","ctorParameters","MatVerticalStepper","height","MatStepperNext","(click)","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","name","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","_sort","sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","direction","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","connect","disconnect","show","_setStyles","hide","inkBar","left","width","templateRef","viewContainerRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_content","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","nextId","MatTabChangeEvent","MatTabGroupBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","_value","_percent","_calculatePercentage","MatSlider","_vertical","_roundLabelTo","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","_isActive","axis","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_dirChangeSubscription","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","_MatSliderMixinBase","MatSliderModule","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","[@contentFade]","SHOW_ANIMATION","ENTERING","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","[attr.id]","FocusMonitor","UniqueSelectionDispatcher","MatRadioButton","ariaLabel","ariaLabelledby","checked","align","labelPosition","required","_ripple","MatRipple","_inputElement","_MatRadioButtonMixinBase","MatRadioModule","MatRadioGroup","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","focusVia","_openedVia","blur","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","stopPropagation","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChildren","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","_uniqueId","_required","_checked","_rippleConfig","centered","radius","_slideRenderer","SlideToggleRenderer","focusOrigin","_onInputFocusChange","_onChangeEvent","dragging","_onInputClick","toggle","_focusRipple","fadeOut","launch","tslib_1.__assign","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","MatSlideToggleModule","MatSliderBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","toString","split","pop","MatPaginator","_pageSize","_updateDisplayedPageSizeOptions","_pageSizeOptions","pageSizeOptions","_initialized","_intlChanges","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","MatTooltipModule","MAT_PAGINATOR_INTL_PROVIDER","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","newValue","strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","descendants","MatRadioButtonBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_tooltipInstance","_disposeTooltip","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","_createTooltip","isVisible","ESCAPE","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","isDirectionLtr","getMatTooltipInvalidPositionError","_invertPosition","isLtr","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ARIA_DESCRIBER_PROVIDER","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","_pageIndex","_length","_tempValues","_setOptionsFromValues","_reportValueChange","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_setSelected","_getOptionByValue","Boolean","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListDivider","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatDividerCssMatStyler","MatListSubheaderCssMatStyler","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_hovered","_highlighted","_triggersSubmenu","_checkDisabled","_emitHoverEvent","getLabel","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MatMenu","_defaultOptions","_xPosition","xPosition","_yPosition","yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","overlapTrigger","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","parentMenu","focusFirstItem","resetActiveItem","posX","posY","setElevation","depth","newElevation","customElevation","c","_previousElevation","_startAnimation","_resetAnimation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","rootNode","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","ɵ0","MatMenuModule","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","hideToggle","displayMode","MatAccordion","CdkAccordion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","_hideToggle","expanded","_getExpandedState","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keyup","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","params","collapsedHeight","expandedHeight","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","MatMonthView","dateFilter","selectedChange","_userSelection","MatYearView","_dateAdapter","_dateFormats","createMissingDateImplError","_activeDate","today","oldActiveDate","_getValidDateOrNull","deserialize","getYear","_init","_selectedMonth","_getMonthInCurrentYear","_monthSelected","month","daysInMonth","getNumDaysInMonth","createDate","activeDate","getDate","_todayMonth","_yearLabel","getYearName","monthNames","getMonthNames","_months","_createCellForMonth","date","getMonth","monthName","format","display","monthYearA11yLabel","MatCalendarCell","toLocaleUpperCase","_isMonthEnabled","firstOfMonth","addCalendarDays","isDateInstance","isValid","MatCalendar","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_monthView","monthYearLabel","switchToYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","nextMonthLabel","nextYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","_dateSelected","sameDate","_userSelected","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","date1","date2","_prevMonthInSameCol","_nextMonthInSameCol","DateAdapter","MAT_DATE_FORMATS","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContent","_calendar","datepicker","[class.mat-datepicker-content-touch]","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","isAttached","closedStream","afterClosed","componentInstance","_createPopup","getPopupConnectionElementRef","fallbackOffset","MatDialog","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","oldDate","registerOnValidatorChange","validate","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","parse","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","matDatepicker","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatDatepickerIntl","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","disableClose","_afterOpen","_beforeClose","_animationStateChanged","phaseName","_result","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","keydownEvents","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","closeAll","componentOrTemplateRef","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","dateA11yLabel","d1","d2","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","MatDialogConfig","ariaDescribedBy","autoFocus","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_escapeEventStream","_destroyPanel","autocomplete","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","optionSelections","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","button","anchor","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","p","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","year","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]"],"mappings":"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"}