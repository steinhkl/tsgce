{"version":3,"file":"material-tooltip.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/tooltip-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to delay before changing the tooltip visibility to hidden */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element, false).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('initial, void, hidden', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER, MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER, ARIA_DESCRIBER_PROVIDER],\n})\nexport class MatTooltipModule {}\n"],"names":["getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","_scrollStrategy","_dir","_this","this","_position","_disabled","showDelay","hideDelay","_message","_manualListeners","Map","element","nativeElement","IOS","nodeName","style","webkitUserSelect","userSelect","set","show","hide","forEach","listener","event","addEventListener","monitor","subscribe","origin","run","Object","defineProperty","prototype","value","_tooltipInstance","_disposeTooltip","coerceBooleanProperty","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","describe","message","_tooltipClass","_setTooltipClass","ngOnDestroy","removeEventListener","clear","stopMonitoring","delay","disabled","_createTooltip","toggle","isVisible","_handleKeydown","e","keyCode","ESCAPE","stopPropagation","overlayRef","_createOverlay","portal","ComponentPortal","TooltipComponent","attach","instance","merge","afterHidden","detachments","_getOrigin","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","onPositionChange","change","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","config","OverlayConfig","direction","positionStrategy","panelClass","scrollStrategy","_overlayRef","create","dispose","isDirectionLtr","originX","originY","_a","_invertPosition","x","y","isLtr","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","pipe","take","updatePosition","tooltipClass","type","Directive","args","selector","exportAs","host","(longpress)","(keydown)","(touchend)","ElementRef","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","undefined","decorators","Inject","Directionality","Optional","Input","_positionDeprecated","_changeDetectorRef","_visibility","_closeOnInteraction","_transformOrigin","_onHide","Subject","_hideTimeoutId","clearTimeout","_showTimeoutId","setTimeout","overlayPosition","axis","_animationStart","_animationDone","toState","next","Promise","resolve","then","_handleBodyInteraction","markForCheck","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","trigger","state","transform","transition","animate","aria-hidden","MatTooltipModule","NgModule","imports","CommonModule","OverlayModule","MatCommonModule","PlatformModule","A11yModule","exports","declarations","entryComponents","providers","ARIA_DESCRIBER_PROVIDER"],"mappings":"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"}